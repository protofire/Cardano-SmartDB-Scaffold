import 'reflect-metadata';

import { Convertible{{#ifDirective this "entity"}}, BaseEntity, asEntity{{/ifDirective}}{{#ifDirective this "smartDBEntity"}}, BaseSmartDBEntity, asSmartDBEntity{{/ifDirective}}{{#ifDirective this "especialImports" }}{{#each fromSmart_db as |import|}}, {{{import}}}{{/each}}{{/ifDirective}} } from 'smart-db';

import { {{#ifDirective this "especialImports" }}{{#each fromLucid_cardano as |import|}}{{{import}}}, {{/each}}{{/ifDirective}} } from 'lucid-cardano';

{{#ifDirective this "entity"}}
@asEntity()
{{/ifDirective}}
{{#ifDirective this "smartDBEntity"}}
@asSmartDBEntity()
{{/ifDirective}}

export class {{name}}Entity extends {{#ifDirective this "entity"}}Base{{/ifDirective}}{{#ifDirective this "smartDBEntity"}}BaseSmartDB{{/ifDirective}}Entity {
    protected static _apiRoute: string = '{{toLowerCase name}}';
    protected static _className: string = '{{name}}';

    // #region fields

    {{#each fields}}
    @Convertible({{#ifDirective this "convertible" }} { {{#each params as |param|}}{{{param}}}, {{/each}} } {{/ifDirective}})
    {{name}}{{#ifDirective this "nullable"}}?{{ else }}!{{/ifDirective}}: {{#ifDirective this "specialType" }} {{{typeName}}} {{ else }}{{convertGqlTypeToTs type}}{{/ifDirective}}{{#ifDirective this "default"}} = {{formatDefaultValue defaultValue}}{{/ifDirective}};
    {{/each}}

    // #endregion fields

    // #region db

    public static defaultFieldsWhenUndefined: Record<string, boolean> = {};

    public static alwaysFieldsForSelect: Record<string, boolean> = {
        ...super.alwaysFieldsForSelect,
        {{#each fields}}
          {{name}}: true,
        {{/each}}
    };

    // #endregion db
}
